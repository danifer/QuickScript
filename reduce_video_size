#!/bin/bash

# Function to get human-readable file size
get_file_size() {
    local file="$1"
    
    # Get file size in bytes
    local size_bytes=$(stat -f "%z" "$file" 2>/dev/null || stat -c "%s" "$file" 2>/dev/null)
    
    # Check if stat command was successful
    if [ -z "$size_bytes" ]; then
        echo "Unknown"
        return
    fi
    
    # Convert to human-readable format
    if [ $size_bytes -ge 1073741824 ]; then
        echo "$(printf "%.2f" $(echo "$size_bytes/1073741824" | bc -l)) GB"
    elif [ $size_bytes -ge 1048576 ]; then
        echo "$(printf "%.2f" $(echo "$size_bytes/1048576" | bc -l)) MB"
    elif [ $size_bytes -ge 1024 ]; then
        echo "$(printf "%.2f" $(echo "$size_bytes/1024" | bc -l)) KB"
    else
        echo "$size_bytes bytes"
    fi
}

# Check if required commands are installed
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo "Error: $1 is not installed or not in the PATH."
        echo "Please install $1 before running this script."
        exit 1
    fi
}

check_command ffmpeg
check_command tar
check_command gzip

# Check if a file was provided
if [ $# -eq 0 ]; then
    echo "Error: No input file provided."
    echo "Usage: $0 <input-file.mov>"
    exit 1
fi

# Get the input file
input_file="$1"

# Check if the input file exists
if [ ! -f "$input_file" ]; then
    echo "Error: File '$input_file' does not exist."
    exit 1
fi

# Get the input file size
input_size=$(get_file_size "$input_file")
echo "Input file size: $input_size"

# List of common video extensions
video_extensions=("mov" "mp4" "avi" "mkv" "wmv" "flv" "webm" "m4v" "3gp" "mpg" "mpeg")

# Extract the file extension
file_extension="${input_file##*.}"
file_extension="${file_extension,,}" # Convert to lowercase

# Check if the input file has a known video extension
is_video_ext=false
for ext in "${video_extensions[@]}"; do
    if [[ "$file_extension" == "$ext" ]]; then
        is_video_ext=true
        break
    fi
done

if [[ "$is_video_ext" == false ]]; then
    echo "Warning: Input file does not have a common video extension."
    echo "Known video extensions: ${video_extensions[*]}"
    read -p "Continue anyway? (y/n): " continue_anyway
    if [[ ! "$continue_anyway" =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Create output filename by replacing the original extension with .mp4
output_file="${input_file%.*}.mp4"
# Create tar.gz filename
tar_file="${input_file%.*}.tar.gz"

echo "Converting '$input_file' to '$output_file'..."

# Run the ffmpeg command
ffmpeg -i "$input_file" -vcodec libx264 -crf 24 "$output_file"

# Check if the conversion was successful
if [ $? -eq 0 ]; then
    echo "Conversion successful: $output_file"
    
    # Get the output file size
    output_size=$(get_file_size "$output_file")
    echo "Output file size: $output_size"
    
    # Create tar.gz file
    echo "Creating tar.gz archive: $tar_file"
    tar -czf "$tar_file" -C "$(dirname "$output_file")" "$(basename "$output_file")"
    
    if [ $? -eq 0 ]; then
        # Get the tar.gz file size
        tar_size=$(get_file_size "$tar_file")
        echo "Archive file size: $tar_size"
        
        # Remove the MP4 file
        echo "Removing intermediate MP4 file..."
        rm "$output_file"
        
        if [ $? -eq 0 ]; then
            echo "Process complete!"
            echo "Input: $input_file ($input_size) â†’ Output: $tar_file ($tar_size)"
        else
            echo "Warning: Could not remove the MP4 file."
            echo "Process completed with tar.gz archive created, but MP4 file remains."
        fi
    else
        echo "Error: Failed to create tar.gz archive."
        echo "MP4 file remains at: $output_file"
    fi
else
    echo "Error: Conversion failed."
fi
